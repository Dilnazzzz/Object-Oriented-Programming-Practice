import enum
import datetime
# Using enum class create enumerations
class LoggerLevel(enum.Enum):
   DEBUG = 1
   INFO = 2
   WARNING = 3
   ERROR = 4
   CRITICAL = 5
 
class FileLog():
   # TODO: implement a singleton logging class!!
   level = LoggerLevel.DEBUG
   file_name = None
   def __new__(cls):
      
       if not hasattr(cls, '_instance'):
 
           cls._instance = super(FileLog, cls).__new__(cls)
 
       return cls._instance
 
   def _write(self, message: str):
       if self.file_name:
           with open(file_name, 'a+') as f:
               f.write("{} {}\n".format(datetime.datetime.now(), message))
       else:
           print(f"LOG:{message}")
          
   def __getattr__(self, name):
       self._write(f"{name} is not a FileLog attribute")
       return
      
      
   def debug(self, message: str):
       if self.level.value <= LoggerLevel.DEBUG.value:
           message = "DEBUG: " + message
           self._write(message)
 
   def info(self, message: str):
       if self.level.value <= LoggerLevel.INFO.value:
           message = "INFO: " + message
           self._write(message)
          
   def warning(self, message: str):
       if self.level.value <= LoggerLevel.WARNING.value:
           message = "WARNING: " + message
           self._write(message)
          
   def error(self, message: str):
       if self.level.value <= LoggerLevel.ERROR.value:
           message = "ERROR: " + message
           self._write(message)
          
   def critical(self, message: str):
       if self.level.value <= LoggerLevel.CRITICAL.value:
           message = "CRITICAL: " + message
           self._write(message)
